-- DemonClient - Painel Admin
-- Desenvolvido por: Hiro
-- ATUALIZADO: Só funciona com Demon Hub ativo

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")

-- ===== SISTEMA DE VERIFICAÇÃO DEMON HUB =====
local function isDemonHubActive(player)
    if not player then return false end
    
    -- Método 1: Verificar marcador no player
    local marker = player:FindFirstChild("DemonHubMarker")
    if marker and marker:IsA("StringValue") then
        return true
    end
    
    -- Método 2: Verificar Global
    if _G.DemonHubUsers and _G.DemonHubUsers[player.Name] then
        return true
    end
    
    -- Método 3: Verificar RemoteEvent
    local remote = ReplicatedStorage:FindFirstChild("DemonAdminRemote")
    if remote then
        return true
    end
    
    return false
end

-- Função para verificar se usuário tem Demon Hub
local function isUserWhitelisted(username)
    local player = Players:FindFirstChild(username)
    if not player then
        return false, "Jogador não encontrado"
    end
    
    if isDemonHubActive(player) then
        return true, "Demon Hub Ativo"
    else
        return false, "Demon Hub não detectado"
    end
end

-- VERIFICAÇÃO INICIAL
local function verifyWhitelistOnStart()
    local username = LocalPlayer.Name:lower()
    local isWhitelisted, reason = isUserWhitelisted(username)
    
    if not isWhitelisted then
        task.wait(2)
        LocalPlayer:Kick("❌ DEMON HUB NÃO DETECTADO!\n\nExecute o Demon Hub primeiro para usar os comandos admin.")
        return false
    end
    
    return true
end

-- Executa a verificação inicial
if not verifyWhitelistOnStart() then
    return
end

-- Sistema de verificação contínua
local function monitorDemonHubStatus()
    while true do
        task.wait(10)
        
        local username = LocalPlayer.Name:lower()
        local isWhitelisted, reason = isUserWhitelisted(username)
        
        if not isWhitelisted then
            LocalPlayer:Kick("❌ DEMON HUB DESCONECTADO!\n\nRecarregue o Demon Hub.")
            break
        end
    end
end

task.spawn(monitorDemonHubStatus)

-- ===== SISTEMA DE COMANDOS ADMIN =====
local DONOS = {
    ["hiro0881"] = true,
    ["jifhgiu"] = true,
    ["cartolahub7"] = true,
    -- ... (sua lista de donos)
}

local function IsDono(n) return DONOS[n] == true end
local function IsAutorizado(n) return IsDono(n) end

-- Variáveis de Estado
local OVER_USERS = {}
local tagsVisiveis = true
local JAILED_PLAYERS = {}
local FROZEN_PLAYERS = {}

-- Configuração de Jumpscares
local JUMPSCARES = {
    { Name = ";jumps1", ImageId = "rbxassetid://126754882337711", AudioId = "rbxassetid://138873214826309" },
    { Name = ";jumps2", ImageId = "rbxassetid://86379969987314", AudioId = "rbxassetid://143942090" },
    { Name = ";jumps3", ImageId = "rbxassetid://127382022168206", AudioId = "rbxassetid://143942090" },
    { Name = ";jumps4", ImageId = "rbxassetid://95973611964555", AudioId = "rbxassetid://138873214826309" },
}

-- Função para enviar comandos para jogadores com Demon Hub
local function sendCommandToPlayer(player, command, ...)
    if not isDemonHubActive(player) then
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = "[ADMIN] ❌ " .. player.Name .. " não tem Demon Hub ativo!",
            Color = Color3.fromRGB(255, 100, 100),
            Font = Enum.Font.GothamBold
        })
        return false
    end
    
    local remote = ReplicatedStorage:FindFirstChild("DemonAdminRemote")
    if remote then
        remote:FireClient(player, command, player, ...)
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = "[ADMIN] ✅ Comando " .. command .. " enviado para " .. player.Name,
            Color = Color3.fromRGB(0, 255, 0),
            Font = Enum.Font.GothamBold
        })
        return true
    end
    return false
end

-- Funções de Ação (usando o sistema de Remote)
local function FreezePlayer(player)
    return sendCommandToPlayer(player, "freeze")
end

local function UnfreezePlayer(player)
    return sendCommandToPlayer(player, "unfreeze")
end

local function JailPlayer(player)
    return sendCommandToPlayer(player, "jail")
end

local function UnjailPlayer(player)
    return sendCommandToPlayer(player, "unjail")
end

local function KillPlayer(player)
    return sendCommandToPlayer(player, "kill")
end

-- Função para Encontrar Jogador por Nome Parcial
local function findPlayerByPartialName(partialName)
    if not partialName or partialName == "" then return nil end
    local lowerPartialName = partialName:lower():gsub("%s+", "")
    for _, p in ipairs(Players:GetPlayers()) do
        if p.Name:lower():find(lowerPartialName, 1, true) or p.DisplayName:lower():find(lowerPartialName, 1, true) then
            return p
        end
    end
    return nil
end

-- Jumpscare local (só funciona no próprio admin)
local function TriggerJumpscare(player, jumpscare)
    if player ~= LocalPlayer then return false end
    
    local screenGui = Instance.new("ScreenGui", CoreGui)
    screenGui.Name = "JumpscareGui"
    screenGui.IgnoreGuiInset = true
    local imageLabel = Instance.new("ImageLabel", screenGui)
    imageLabel.Size = UDim2.new(1, 0, 1, 0)
    imageLabel.Position = UDim2.new(0, 0, 0, 0)
    imageLabel.BackgroundTransparency = 1
    imageLabel.Image = jumpscare.ImageId
    local sound = Instance.new("Sound", screenGui)
    sound.SoundId = jumpscare.AudioId
    sound.Volume = 1
    sound.Looped = false
    sound:Play()
    local flashCount = 10
    local flashInterval = 0.2
    for i = 1, flashCount do
        if not screenGui.Parent then break end
        imageLabel.ImageTransparency = (i % 2 == 0) and 0.3 or 0
        task.wait(flashInterval)
    end
    sound:Stop()
    screenGui:Destroy()
    return true
end

-- Manipulador de Chat
local function analisarChatDe(chatter, message)
    local msg = message:lower():gsub("%s+", " ")
    local args = {}
    for word in msg:gmatch("%S+") do
        table.insert(args, word)
    end

    -- Verificar permissões
    if not IsAutorizado(chatter.Name) then
        if chatter == LocalPlayer then
            StarterGui:SetCore("ChatMakeSystemMessage", {
                Text = "[ADMIN] ❌ Você não tem permissão para usar comandos admin.",
                Color = Color3.fromRGB(255, 100, 100),
                Font = Enum.Font.GothamBold
            })
        end
        return
    end

    -- Comando ;verifique
    if msg == ";verifique" then
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = "[ADMIN] Comando ;verifique detectado de " .. chatter.Name,
            Color = Color3.fromRGB(0, 255, 0),
            Font = Enum.Font.GothamBold
        })
        return
    end

    -- Detectar Over_Users
    if msg == "over_users" then
        OVER_USERS[chatter.Name] = true
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = "[ADMIN] " .. chatter.Name .. " identificado como Usuário Light",
            Color = Color3.fromRGB(170, 0, 255),
            Font = Enum.Font.GothamBold
        })
        return
    end

    -- Comando ;freeze [player]
    if args[1] == ";freeze" and #args >= 2 then
        local targetPlayer = findPlayerByPartialName(args[2])
        if targetPlayer then
            FreezePlayer(targetPlayer)
        else
            StarterGui:SetCore("ChatMakeSystemMessage", {
                Text = "[ADMIN] ❌ Jogador não encontrado: " .. args[2],
                Color = Color3.fromRGB(255, 100, 100),
                Font = Enum.Font.GothamBold
            })
        end
        return
    end

    -- Comando ;unfreeze [player]
    if args[1] == ";unfreeze" and #args >= 2 then
        local targetPlayer = findPlayerByPartialName(args[2])
        if targetPlayer then
            UnfreezePlayer(targetPlayer)
        end
        return
    end

    -- Comando ;jail [player]
    if args[1] == ";jail" and #args >= 2 then
        local targetPlayer = findPlayerByPartialName(args[2])
        if targetPlayer then
            JailPlayer(targetPlayer)
        end
        return
    end

    -- Comando ;unjail [player]
    if args[1] == ";unjail" and #args >= 2 then
        local targetPlayer = findPlayerByPartialName(args[2])
        if targetPlayer then
            UnjailPlayer(targetPlayer)
        end
        return
    end

    -- Comando ;kill [player]
    if args[1] == ";kill" and #args >= 2 then
        local targetPlayer = findPlayerByPartialName(args[2])
        if targetPlayer then
            KillPlayer(targetPlayer)
        end
        return
    end

    -- Comandos de Jumpscare (só local)
    for _, jumpscare in ipairs(JUMPSCARES) do
        if msg == jumpscare.Name then
            TriggerJumpscare(chatter, jumpscare)
            return
        end
    end

    -- Comando ;ch [player] [message]
    if args[1] == ";ch" and #args >= 3 then
        local targetPartialName = args[2]
        local messageToSend = table.concat(args, " ", 3)
        local targetPlayer = findPlayerByPartialName(targetPartialName)
        if targetPlayer and targetPlayer == LocalPlayer and messageToSend ~= "" then
            pcall(function()
                local channel = TextChatService:WaitForChild("TextChannels"):FindFirstChild("RBXGeneral") or TextChatService:WaitForChild("TextChannels"):GetChildren()[1]
                if channel then
                    channel:SendAsync(messageToSend)
                    StarterGui:SetCore("ChatMakeSystemMessage", {
                        Text = "[ADMIN] " .. LocalPlayer.Name .. " enviou: " .. messageToSend,
                        Color = Color3.fromRGB(0, 255, 0),
                        Font = Enum.Font.GothamBold
                    })
                end
            end)
        end
        return
    end
end

-- Conectar ao evento de chat
local function setupChatListener()
    local textChatService = game:GetService("TextChatService")
    local channel = textChatService:WaitForChild("TextChannels"):FindFirstChild("RBXGeneral") 
                   or textChatService:WaitForChild("TextChannels"):GetChildren()[1]
    
    if channel then
        channel.OnIncomingMessage = function(message)
            local properties = Instance.new("TextChatMessageProperties")
            if message.TextSource then
                local player = Players:GetPlayerByUserId(message.TextSource.UserId)
                if player then
                    analisarChatDe(player, message.Text)
                end
            end
            return properties
        end
    else
        -- Fallback para chat tradicional
        Players.PlayerChatted:Connect(function(chatType, player, message)
            if chatType == Enum.PlayerChatType.All then
                analisarChatDe(player, message)
            end
        end)
    end
end

-- Inicializar
setupChatListener()

StarterGui:SetCore("ChatMakeSystemMessage", {
    Text = "[ADMIN] ✅ Sistema admin carregado! Comandos ativos apenas para usuários com Demon Hub.",
    Color = Color3.fromRGB(0, 255, 0),
    Font = Enum.Font.GothamBold
})

print("[ADMIN] Script carregado com verificação de Demon Hub!")
